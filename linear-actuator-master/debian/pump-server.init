#! /bin/bash

### BEGIN INIT INFO
# Provides:		pump-server
# Required-Start:	$network $remote_fs
# Required-Stop:	$network $remote_fs
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Server for Open Source Syringe Pump
# Description:		Allow browser and python clients to control a syringe pump
### END INIT INFO

# The defaults below can be overridden in this file.
CONFIG_FILE=/etc/default/pump-server

# Should the server be started?
RUN=1

# All the commented values below are the defaults.  If the variables are given a value (even if empty), they will be passed to the server.

# Port to listen for browser requests.
#PORT=8080

# Address to listen on.
#ADDRESS=

# Lead screw pitch.
#PITCH=.8

# Lead screw steps per revolution.
#STEPS_PER_REVOLUTION=3200

# Initial speed setting.
#INITIAL_ML_PER_S=.7

# Initial calibration.
#INITIAL_ML_PER_MM=0.16355310023987787

# Hardware in use.
#DIR_PIN=11
#STEP_PIN=13
#SLEEP_PIN=15
#MS3_PIN=19
#MS2_PIN=21
#MS1_PIN=23

# Required credentials as user:password or just a user (password is ignored).
#LOGIN=''

# Shadow-like passwordfile with acceptable credentials.
#PASSWORDFILE=''

# File for storing the pid.  You probably don't need to change this.
PIDFILE=/run/pump-server.pid

# End of variable list.

if test -r $CONFIG_FILE; then
	. $CONFIG_FILE
fi

NAME=pump-server
DESC="Server for Open Source Syringe Pump"
DAEMON=/usr/sbin/pump-server
ARGS=(--quiet --make-pidfile --pidfile "$PIDFILE")
START_ARGS=("${ARGS[@]}" --background --oknodo --start --startas "$DAEMON" -- --system)
if [ -v PORT ] ; then		START_ARGS+=(--port="$PORT") ; fi
if [ -v ADDRESS ] ; then	START_ARGS+=(--address="$ADDRESS") ; fi
if [ -v PITCH ] ; then	START_ARGS+=(--pitch="$PITCH") ; fi
if [ -v STEPS_PER_REVOLUTION ] ; then	START_ARGS+=(--steps-per-revolution="$STEPS_PER_REVOLUTION") ; fi
if [ -v INITIAL_ML_PER_S ] ; then	START_ARGS+=(--initial-ml-per-s="$INITIAL_ML_PER_S") ; fi
if [ -v INITIAL_ML_PER_MM ] ; then	START_ARGS+=(--initial-ml-per-mm="$INITIAL_ML_PER_MM") ; fi
if [ -v DIR_PIN ] ; then	START_ARGS+=(--dir-pin="$DIR_PIN") ; fi
if [ -v STEP_PIN ] ; then	START_ARGS+=(--step-pin="$STEP_PIN") ; fi
if [ -v SLEEP_PIN ] ; then	START_ARGS+=(--sleep-pin="$SLEEP_PIN") ; fi
if [ -v MS1_PIN ] ; then	START_ARGS+=(--ms1-pin="$MS1_PIN") ; fi
if [ -v MS2_PIN ] ; then	START_ARGS+=(--ms2-pin="$MS2_PIN") ; fi
if [ -v MS3_PIN ] ; then	START_ARGS+=(--ms3-pin="$MS2_PIN") ; fi
if [ -v LOGIN ] ; then		START_ARGS+=(--login="$LOGIN") ; fi
if [ -v PASSWORDFILE ] ; then	START_ARGS+=(--passwordfile="$PASSWORDFILE") ; fi
STOP_ARGS=("${ARGS[@]}" --oknodo --stop)

if test ! -x "$DAEMON"; then
	echo "$DAEMON does not exist"
	exit 0
fi

. /lib/lsb/init-functions

#
# Start the daemon.
#
do_start()
{
	if [ "$RUN" -eq 0 ]; then
		return 0
	fi
	start-stop-daemon "${START_ARGS[@]}"
	RETVAL="$?"
	if [ "$RETVAL" -eq 0 ]; then
		# It might be that the daemon is not started
		# (see start-stop-daemon --background for explanation)

		# Wait a little bit to allow the daemon to start
		sleep 1
		start-stop-daemon --status "${ARGS[@]}"
		RETVAL="$?"
		case "$RETVAL" in
			0) ;;
			*) RETVAL=1 ;;
		esac
	fi
	return "$RETVAL"
}

#
# Stop the daemon and clean up.
#
do_stop()
{
	start-stop-daemon "${STOP_ARGS[@]}"
	RETVAL="$?"
	[ "$RETVAL" -eq 0 ] && rm -f "$PIDFILE"
	return "$RETVAL"
}

case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		log_end_msg $?
		;;
	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		log_end_msg $?
		;;
	restart|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"
		if do_stop; then
			do_start
			log_end_msg $?
		else
			log_end_msg $?
		fi
		;;
	status)
		status_of_proc "$NAME" "$DESC"
		;;
	*)
		log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
		exit 1
		;;
esac

exit 0
